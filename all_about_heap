Heap is a complete binary tree that comes with a heap order property.

CBT - 
   Every level is completely filled except last level
   Node always leans towards left

Heap Order Property - 
   Max Heap (child node ki value parent se choti hogi) 
   Min Heap (child node ki value parent se bdi hogi) 

        60
        /    \
      50      40
     /   \  
    30    20 

    [x, 60, 50, 40, 30, 20]

    first index empty rahega vector or array ka.
    Node = ith index
    left child = 2*i index
    right child = 2*i + 1 index

eg -
  node is 60
  left child is at = 2*1 = 2 which is 50
  right child is at = 2*1 + 1 = 3 which is 40

Insertion krna bhut easy hai (by code niche hai) 

//Insertion
//delete mtlb root ko delete(like 60)

#include<iostream>
using namespace std;

class heap {
    public:
    int arr[100];
    int size;

    heap(){
        arr[0] = -1;
        size = 0;
    }

    void insert(int val){

        size = size+1;
        int index = size;
        arr[index] = val;

        while(index > 1){
            int parent = index/2;

            if(arr[parent] < arr[index]){
                swap(arr[parent], arr[index]);
                index = parent;
            }
            else{
                return;
            }
        }
    }

    void deletefromHeap(){
        if(size == 0){
            cout<<"Nothing to delete";
            return;
        }

        arr[i] = arr[size];
        size--;

        int i = 1;
        while(i<size){
            int leftIndex = 2*i;
            int rightIndex = 2*i + 1;

            if(leftIndex < size && arr[i] < arr[leftIndex]){
                swap(arr[i], arr[leftIndex]);
                i = leftIndex;
            }
            else if(rightIndex < size && arr[i] < arr[rightIndex]){
                 swap(arr[i], arr[rightIndex]);
                 i = rightIndex;
            }
            else{
                return;
            }
        }
    }

    void print(){
        for(int i = 0; i <= size; i++){
            cout<<arr[i]<<" ";
        }
    }
};

void heapify(int arr[], int n, int i){

   int largest = i;
   int left = 2*i;
   int right = 2*i + 1;

   if(left<=n && arr[largest] < arr[left])
      largest = left;

   if(right<=n && arr[largest] < arr[right])
      largest = right;  

   if(largest != i){
      swap(arr[largest], arr[i]);
      heapify(arr, n, largest);
   }

}

int main(){
    heap h;
    h.insert(50);
    h.insert(20);
    h.insert(80);
    h.insert(10);
    h.insert(15);
    h.print();

    int arr[6] = {-1, 54, 53, 55, 52, 50 };
    int n = 5;
    for(int i=n/2; i>0; i--)
       heapify(arr, n, i);
}

insertion time complexity - 0(logN)
deletion time complexity - 0(logN)


In complete binary tree, leaf node is from n/2+1 to n. Means agar koi tmhe ek vector de de aur use heap krne khe to hm bs n/2 se 1 tk ke
value process krenge kyuki n/2 ke baad saare leaf node hai aur leaf node khud me heap hote.

//Heapify - ek node ko uske shi jgh le jana heapify ka kaam hai
in short aapko ek index diya hai i aur aapne uspe heapify function call krdi to heapify function uss index se niche tk pure part ko heap me convert kr dega

code heapify ka upar hai
time complexity of heapify function is O(logN)

Building a heap - time complexity O(N)

Question specify krega indexing 0 lena hai ya 1

Indexing 1 maan ke chaloge to 
   left child at = 2*i
   right child at = 2*i + 1

Indexing 0 maan ke chaloge to
    left child at = 2*i + 1
   right child at = 2*i + 2
   
//Code for Min Heap is in Day 12



priority_queue<int> pq;   //ye max heap hota hai
priority_queue<int, vector<int>, greater<int>> pq;   //ye min heap hota hai
